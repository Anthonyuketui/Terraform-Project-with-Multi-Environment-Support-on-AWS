name: Terraform Dev DevSecOps Pipeline

on:
  pull_request:
    branches:
      - dev
  push:
    branches:
      - dev

jobs:
  # -------------------------
  # Security checks (optional)
  # Uncomment these for stricter DevSecOps enforcement
  # -------------------------
  # security-checks:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Run Checkov
  #       uses: bridgecrewio/checkov-action@v12
  #       with:
  #         directory: environments/dev
  #         framework: terraform
  #         skip_check: CKV_AWS_79,CKV_AWS_126
  #
  #     - name: Run tfsec
  #       uses: aquasecurity/tfsec-action@v1.0.3
  #       with:
  #         working_directory: environments/dev
  #
  #     - name: Run Terrascan
  #       uses: tenable/terrascan-action@main
  #       with:
  #         iac_type: 'terraform'
  #         iac_dir: 'environments/dev'

  # -------------------------
  # Cost analysis
  # -------------------------
  cost-analysis:
    runs-on: ubuntu-latest
    # If you uncomment security-checks in future, you can add: needs: security-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost cost estimate
        run: |
          cd environments/dev
          infracost breakdown --path . --format json --out-file infracost.json

  # -------------------------
  # Terraform Dev
  # -------------------------
  terraform-dev:
    runs-on: ubuntu-latest
    environment: dev
    needs: cost-analysis  # only depends on cost-analysis for now

    permissions:
      id-token: write
      contents: read

    env:
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format Check
        working-directory: environments/dev
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: environments/dev
        run: terraform init -backend-config=backend.tfvars

      - name: Terraform Validate
        working-directory: environments/dev
        run: terraform validate

      - name: Terraform Plan
        working-directory: environments/dev
        run: terraform plan -var-file=terraform.tfvars -out=tfplan

      # -------------------------
      # Conftest (optional policy checks)
      # -------------------------
      - name: Run Conftest
        uses: instrumenta/conftest-action@master
        with:
          files: environments/dev/tfplan
          policy: policy/
        # You can comment this out if you want no policy enforcement in dev

      - name: Terraform Apply (on push only)
        if: github.event_name == 'push'
        working-directory: environments/dev
        run: terraform apply -auto-approve tfplan
